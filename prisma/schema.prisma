// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email             String             @unique
  name              String
  isAdmin           Boolean            @default(false)
  password          String?
  googleId          String?            @unique @map("google_id")
  provider          String?
  isVerified        Boolean            @default(false) @map("is_verified")
  songs             Song[]
  playlists         Playlist[]
  refreshToken      UserRefreshToken?
  verificationToken VerificationToken?

  @@map("user")
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @map("user_id")

  @@map("verification_token")
}

model Song {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User       @relation(fields: [userId], references: [id])
  userId    String     @map("user_id")
  playlists Playlist[] @relation("PlaylistSongs")

  name     String
  author   String
  text     String
  chords   String
  shared   Boolean
  verified Boolean @default(false)
  views    Int     @default(0)

  @@map("song")
}

model UserRefreshToken {
  id           String @id @default(uuid())
  user         User   @relation(fields: [userId], references: [id])
  userId       String @unique @map("user_id")
  refreshToken String @map("refresh_token")

  @@map("user_refresh_token")
}

model Playlist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name      String  @unique
  isDefault Boolean @default(false) @map("is_default")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  songs  Song[] @relation("PlaylistSongs")

  @@map("playlist")
}
